"""" Be VIM """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nocompatible

"""" Load plugins with vim-plug """""""""""""""""""""""""""""""""""""""""""""""
call plug#begin('~/.vim/plugged')

" Color themes
Plug 'sickill/vim-monokai'
Plug 'altercation/vim-colors-solarized'
Plug 'wellsjo/wells-colorscheme.vim'

" Languages
Plug 'pangloss/vim-javascript', { 'for': 'javascript', 'branch': 'develop' }
Plug 'sheerun/vim-polyglot'
Plug 'digitaltoad/vim-jade', { 'for': 'jade' }
Plug 'kchmck/vim-coffee-script', { 'for': 'coffee' }
Plug 'dag/vim-fish', { 'for': 'fish' }
Plug 'fatih/vim-go', { 'for': 'go' }
Plug 'groenewege/vim-less', { 'for': 'less' }
Plug 'leafgarland/typescript-vim', { 'for': 'typescript' }
Plug 'wavded/vim-stylus', { 'for': 'stylus' }
Plug 'cespare/vim-toml', { 'for': 'toml' }
Plug 'elmcast/elm-vim', { 'for': 'elm' }
Plug 'rust-lang/rust.vim', { 'for': 'rust' }
Plug 'mxw/vim-jsx', { 'for': 'javascript.jsx' }
Plug 'leafo/moonscript-vim', { 'for': 'moonscript' }
Plug 'https://github.com/gf3/peg.vim', { 'for': 'peg' }
Plug 'elixir-lang/vim-elixir', { 'for': 'elixir' }
Plug 'Glench/Vim-Jinja2-Syntax', { 'for': 'jinja' }
Plug 'dag/vim2hs', { 'for': 'haskell' }
Plug 'posva/vim-vue', { 'for': 'vue' }
Plug 'daveyarwood/vim-alda', { 'for': 'alda' }
Plug 'ARM9/arm-syntax-vim'

" Other
Plug 'mattn/emmet-vim' " Make writing html so much better
Plug 'valloric/MatchTagAlways' " Highlight matching HTML/XML tags
Plug 'benekastah/neomake' " Syntax checking
Plug 'airblade/vim-gitgutter' " Shows git status for each line in the gutter
Plug 'bling/vim-airline' " Awesome tabline
Plug 'moll/vim-bbye' " Better :bdelete
Plug 'Shougo/vimproc.vim', { 'do': 'make' } " Interactace process exacution to help other plugins
Plug 'Shougo/unite.vim' " Fuzzy finder of things
Plug 'tpope/vim-commentary' " Handle comments
Plug 'tpope/vim-surround' " Deals with surroundings
Plug 'Valloric/YouCompleteMe', { 'do': './install.sh' } " Auto complete
Plug 'marijnh/tern_for_vim', { 'do': 'npm install' } " Syntax aware auto completion for javascript
Plug 'tpope/vim-eunuch' " Misc helper commands
Plug 'tpope/vim-fugitive' " Git plugin
Plug 'sirver/ultisnips' " Snippets
Plug 'rhysd/clever-f.vim' " Better mappings for finding things
Plug 'xolox/vim-misc' " Misc helper functions for plugins
Plug 'xolox/vim-session' " Session management
Plug 'justinmk/vim-sneak' " Better movement the find
Plug 'terryma/vim-expand-region' " Quick modification of visual selections
Plug 'KabbAmine/zeavim.vim' " Access zeal documentation browser from inside vim
Plug 'tpope/vim-repeat' " Repeat plugin maps
Plug 'bhurlow/vim-parinfer', { 'do': 'npm install' } " Parentheses inference for Lisp

call plug#end()

"""" Vanilla Configs """"""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Turn on syntax and filetype detection
syntax on
filetype plugin indent on

" Use bash as the shell
set shell=/bin/bash

" Set location for backup and swap files
set backupdir=~/.vim/.backup//
set directory=~/.vim/.swap//

" Show line numbers
set number

" Don't show the mode in the status line
set noshowmode

" Setup tabs
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab       " Use spaces instead of tabs
set smarttab        " Let's tab key insert 'tab stops', and bksp deletes tabs
set shiftround      " Tab/shifting moves to closest tabstop
set autoindent      " Match indents on new lines
set smartindent     " InPlugin 'sickill/vim-monokai'tellegently dedent/indent new lines based on rules

" Autoreload changed files without asking
set autoread

" Sane backspace
set backspace=indent,eol,start

" Make search better
set ignorecase  " Case insensitive search
set smartcase   " If there are uppercase letters, become case-sensitive
set incsearch   " Live incremental searching
set showmatch   " Live match highlighting
set hlsearch    " Highlight matches
set gdefault    " Use the `g` flag by default

" Set Leader Key
let mapleader = "\<Space>"

" Bind ';' to ':' so we don't have to press shift to input a command
nnoremap ; :
vnoremap ; :

" Bind jj to esc to exit insert mode faster
inoremap jj <esc>

" Change shortcuts for copy, cut and paste
vmap <C-c> "+yi
vmap <C-x> "+c
vmap <C-v> c<ESC>"+p
imap <C-v> <C-r><C-o>+

" Allow hidden buffers without and error
set hidden

" Stop auto-comment
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" Disable Arrow keys
map <Up> <NOP>
map <Down> <NOP>
map <Left> <NOP>
map <Right> <NOP>
imap <Up> <NOP>
imap <Down> <NOP>
imap <Left> <NOP>
imap <Right> <NOP>

" Disable escape key
" imap <Esc> <NOP>

" Swap lines up and down
nnoremap <C-j> :m .+1<CR>==
nnoremap <C-k> :m .-2<CR>==
inoremap <C-j> <Esc>:m .+1<CR>==gi
inoremap <C-k> <Esc>:m .-2<CR>==gi
vnoremap <C-j> :m '>+1<CR>gv=gv
vnoremap <C-k> :m '<-2<CR>gv=gv

" Minimal ui
set guioptions=ae

" Hide the tabline
set showtabline=0

" Use the mouse in the terminal
set mouse=a

" Save current buffer
noremap <Leader>w :w<CR>

" Close the scratch buffer after I finish the completion or exit insert mode
autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
autocmd InsertLeave * if pumvisible() == 0|pclose|endif

" Toggle between current and previously edited file
map <leader><Backspace> <C-^>

au BufNewFile,BufRead *.ejs set filetype=html  " Highlight .ejs files with html
au BufRead,BufNewFile *.swig set filetype=html " Highlight .swig files as html

" Exit insert mode with Control-c
imap <C-c> <ESC>

" Allow modelines
set modeline

" ROT13 Madness
map <F5> ggg?G``

" Refresh the file from disk when the cursor is idle
" Run checktime in buffers, but avoiding the "Command Line" (q:) window
au CursorHold * if getcmdwintype() == '' | checktime | endif

" Use system clipboard by defautl
set clipboard=unnamedplus

" Paste on next line
noremap <Leader>p :pu<CR>

" Neovim specific config
if has('nvim')
  " Allow you to use ESC to exit terminal mode
  tnoremap <Esc> <C-\><C-n>
endif

""""" Plugin Configs """""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" Gitgutter
" Always show the gitgutter sign column
let g:gitgutter_sign_column_always = 1

"" Airline
" Enable it
let g:airline#extensions#tabline#enabled = 1
set laststatus=2

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

" Get rid of the ugly arrows
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline_left_alt_sep=''
let g:airline_right_alt_sep=''

"" bbye
nnoremap <Leader>q :Bdelete<CR>

"" Unite
" File search
nnoremap <C-p> :Unite -start-insert file_rec/async<cr>

" Content search
nnoremap <Leader>/ :Unite grep:.<cr>

" Quick buffer and tab switching
nnoremap <Leader>s :Unite -start-insert tab<cr>
nnoremap <Leader>a :Unite -start-insert buffer<cr>

" Use ag for searching(to follow .gitignores)
let g:unite_source_rec_async_command=['ag', '--nocolor', '--nogroup', '--hidden', '-g', '']

" Use ag for code searching
let g:unite_source_grep_command = 'ag'
let g:unite_source_grep_default_opts = '--line-numbers --nocolor --nogroup --smart-case'
let g:unite_source_grep_recursive_opt = ''
nnoremap <Leader>g :<C-u>Unite -silent -buffer-name=ag grep:.<CR>

"" Commentary
" Toggle comments
vmap <Leader>c gc
nmap <Leader>c gcc

"" UtilSnips
let g:UltiSnipsExpandTrigger="<right>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

"" Vim-Session
" Auto save on exit
let g:session_autosave = 1

" Auto save session every once and awile
let g:session_autosave_periodic = 5 " Minutes

"" Vim-go
" Quick go commands
au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>t <Plug>(go-test)
au FileType go nmap <leader>c <Plug>(go-coverage)

" Go to declaration
au FileType go nmap gd <Plug>(go-def)
au FileType go nmap <Leader>ds <Plug>(go-def-split)
au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
au FileType go nmap <Leader>dt <Plug>(go-def-tab)

" Open up godoc
au FileType go nmap <Leader>g :Godoc<cr>

" Use goimports
let g:go_bin_path = expand("~/Projects/go/bin")
let g:go_fmt_command = "goimports"

" Go + TagBar
nmap <F8> :TagbarToggle<CR>
let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
\ }

"" Neomake
let g:neomake_javascript_enabled_makers = ['eslint']

" Make neomake load the local copy of eslint if aviable
let s:eslint_path = system('PATH=$(npm bin 2> /dev/null):$PATH && which eslint')
let g:neomake_javascript_eslint_exe = substitute(s:eslint_path, '^\n*\s*\(.\{-}\)\n*\s*$', '\1', '')

" Run after save on javascript files
autocmd! BufWritePost *.js Neomake

"" Sneak
let g:sneak#s_next = 1

""""" Color Scheme """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" Set our colorscheme to solorized dark
set background=dark
colorscheme monokai

"" Makke the line number background the same as monokais
highlight LineNr guibg=#272822 ctermbg=235

"" Make Gitgutters background the same as monokai's
highlight SignColumn guibg=#272822 ctermbg=235
highlight GitGutterAdd guifg=green ctermfg=green guibg=#272822 ctermbg=235
highlight GitGutterChange guifg=yellow ctermfg=yellow guibg=#272822 ctermbg=235
highlight GitGutterDelete guifg=red ctermfg=red guibg=#272822 ctermbg=235
highlight GitGutterChangeDelete guifg=yellow ctermfg=yellow guibg=#272822 ctermbg=235

"" Change the background of the autocomplete menu
highlight Pmenu ctermbg=59 guibg=#49483e
highlight PmenuSel guibg=#5A5B55 ctermbg=59

